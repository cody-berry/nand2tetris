// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
    // find our selector for our Mux4Way16
    // whoops, lets swap the load and reset bits for this
    Or(a=load, b=reset, out=selAt1);
    Or(a=load, b=inc, out=loadOrInc);
    Not(in=reset, out=notReset);
    And(a=loadOrInc, b=notReset, out=selAt0);
    Inc16(in=outDuplicate, out=Mux2);

    // now we can do our mux4way16!
    // if load is on, we want to send the input. If the incrementor is on but the load isn't on, we want 1 more than the previous output. If our reset is on but nothing else is on, we want all of our bits to be 0. Otherwise, when none of the inputs are on, we can throw a random thing becuase it's not going to affect the register.
    Mux4Way16(a=false, b=Mux2, c=false, d=in, sel[0]=selAt0, sel[1]=selAt1, out=registerIn);

    // let's find the load bit for our register
    Or(a=loadOrInc, b=reset, out=registerLoad);
    Register(in=registerIn, load=registerLoad, out=out, out[0..15]=outDuplicate);
}
