// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // A register input
    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=instructionAlUoutputopcodemux16);

    // A register load
    Not(in=instruction[5], out=notinsat5);
    Nand(a=notinsat5, b=instruction[15], out=Aload);

    // Actual A register
    Register(in=instructionAlUoutputopcodemux16, load = Aload, out[0..14]=addressM, out[0..15]=Aout);

    // D register load
    And(a=instruction[4], b=instruction[15], out=Dload);

    // Actual D register
    Register(in=ALUoutput, load=Dload, out=Dout);

    // A/M ALU input
    Mux16(a=inM, b=Aout, sel=instruction[12], out=inMAoutinsat12mux16);

    // Actual ALU
    ALU(x=Dout, y=inMAoutinsat12mux16, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out[0..15]=ALUoutput, out=outM, zr=zr, ng=ng);

    // PC load
    And(a=zr, b=instruction[1], out=zrandinsat1);
    And(a=ng, b=instruction[2], out=ngandinsat2);
    Or(a=zrandinsat1, b=ngandinsat2, out=negativeorzero);
    Or(a=ng, b=zr, out=ngorzr);
    Not(in=ngorzr, out=ngnorzr);
    And(a=ngnorzr, b=instruction[0], out=positive);
    Or(a=negativeorzero, b=positive, out=PCload);

    // Actual PC
    PC(in=Aout, reset=reset, inc=true, load=PCload, out[0..14]=pc);

    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);
}